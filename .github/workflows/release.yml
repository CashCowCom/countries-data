name: Release version

on:
  workflow_dispatch:
    inputs:
      semver_type:
        description: "Type"
        required: true
        type: choice
        options:
          - "patch"
          - "minor"
          - "major"

jobs:
  Lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "true"

      - name: Install Poetry
        shell: bash
        run: |
          pip install --upgrade pip
          pip install poetry

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "poetry"

      - name: Lint Package
        shell: bash
        run: |
          poetry install
          make lint

  Test:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "true"

      - name: Install Poetry
        shell: bash
        run: |
          pip install --upgrade pip
          pip install poetry

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "poetry"

      - name: Test Package
        shell: bash
        run: |
          poetry install
          make test

  TagBuildAndPush:
    permissions:
      id-token: write
      contents: write
    needs: [Lint, Test]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment:
      name: pypi
      url: https://pypi.org/p/countries-data

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "true"

      - name: Install Poetry
        shell: bash
        run: |
          pip install --upgrade pip
          pip install poetry twine check-wheel-contents toml argparse

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "poetry"

      - name: Install Package dependencies
        shell: bash
        run: |
          pip install toml argparse
          poetry install

      - name: Bump version
        id: bump_version
        shell: bash
        run: |
          PACKAGE_VERSION=$($GITHUB_WORKSPACE/.github/scripts/internal/bump_version.py ${{ inputs.semver_type }})
          echo "countries_data package will be bumped to version: ${PACKAGE_VERSION}"
          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

      - name: Run Poetry Check for pyproject.toml
        shell: bash
        run: poetry check

      - name: Build Package Distribution
        shell: bash
        run: poetry build

      - name: Check Distribution Descriptions
        shell: bash
        run: |
          twine check dist/*

      - name: Check Wheel Contents
        shell: bash
        run: |
          check-wheel-contents dist/*.whl --ignore W002

      - name: Prepare a unique name for Artifacts
        id: artifact_name
        shell: bash
        run: |
          echo "ARTIFACT_NAME=countries_data-${{ steps.bump_version.outputs.package_version }}" >> $GITHUB_ENV
          echo "artifact_name=countries_data-${{ steps.bump_version.outputs.package_version }}" >> $GITHUB_OUTPUT

      - name: Cache Package Distribution
        id: artifact-upload-step
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./dist/

      - name: Output artifact URL
        id: artifact_url
        shell: bash
        run: |
          echo 'Artifact URL is ${{ steps.artifact-upload-step.outputs.artifact-url }}'
          echo "artifact_file_path=${{ steps.artifact-upload-step.outputs.artifact-url }}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          artifacts: ${{ steps.artifact_url.outputs.artifact_file_path }}
          tag: ${{ steps.artifact_name.outputs.artifact_name }}
          name: "Release ${{ steps.artifact_name.outputs.artifact_name }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          skipIfReleaseExists: true

      - name: Check for Differences
        id: git_diff
        run: |
          if [[ $(git status --porcelain) ]]; then
            echo "has_changes=true" >> $GITHUB_ENV
          else
            echo "has_changes=false" >> $GITHUB_ENV
          fi

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Create Pull Request
        if: env.has_changes == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          branch: "update-countries_data-${{ inputs.semver_type }})"
          base: main
          title: "Update countries_data to version: ${{ steps.dynamic_version.outputs.package_version }}"
          body: "This pull request includes updated to countries_data package to version: ${{ steps.dynamic_version.outputs.package_version }}"
